BFS:
T.c --> O(mn)
S.c --> O(mn)

class Solution {
    int[][] dirs;
    int m =0; int n =0;
    public char[][] updateBoard(char[][] board, int[] click) {
        if(board == null || board.length == 0){
            return board;
        }
        // dirs = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        dirs = new int[][] {{0,1},{0,-1},{1,0},{-1,0},{1,1},{1,-1}, {-1,1},{-1,-1}};


        m = board.length; n = board[0].length;
        if(board[click[0]][click[1]] == 'M'){
            board[click[0]][click[1]] = 'X';
            return board;
        }
        Queue<int[]> q = new LinkedList<>();
        board[click[0]][click[1]] = 'B';
        q.add(new int[]{click[0],click[1]});
        while(!q.isEmpty()){
            int[] curr = q.poll();
            int countMines = countmines(board, curr);            
            if(countMines == 0){
                for(int[] dir:dirs){
                    int nr = dir[0]+curr[0];
                    int nc = dir[1]+curr[1];
                    if(nr >=0 && nr < m && nc >=0 && nc <n && board[nr][nc] == 'E'){
                        board[nr][nc] = 'B';
                        q.add(new int[]{nr,nc});
                    }
                }
            }else{
                board[curr[0]][curr[1]] = (char)(countMines + '0');
            }
        }
       return board; 
    }
    public int countmines(char[][] board, int[] curr){
        int count=0;
        for(int[] dir: dirs){
            int nr = dir[0]+curr[0];
            int nc = dir[1]+curr[1];
            if(nr >=0 && nr < m && nc >=0 && nc <n && board[nr][nc] == 'M'){
                count++;
            }
        }
        return count;
    }
}

************************************************************************

DFS:

T.c --> O(mn), S.c --> O(mn)

class Solution {
    int[][] dirs;
    int m =0; int n =0;
    public char[][] updateBoard(char[][] board, int[] click) {
        if(board == null || board.length == 0){
            return board;
        }
        dirs = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        m = board.length; n = board[0].length;
        if(board[click[0]][click[1]] == 'M'){
            board[click[0]][click[1]] = 'X';
            return board;
        }
        board[click[0]][click[1]] = 'B';
        dfs(board, click);
        
       return board; 
    }

    public void dfs(char[][] board, int[] curr){
        int countmines = countmines(board, curr);
        if(countmines == 0){
            for(int[] dir: dirs){
            int nr = dir[0]+curr[0];
            int nc= dir[1]+curr[1];
                if(nr >=0 && nr <m && nc >=0 && nc < n && board[nr][nc] == 'E'){
                    int[] temp = new int[]{nr, nc};
                    board[nr][nc] = 'B';
                    dfs(board, temp);
                }
            }
        }else{
            board[curr[0]][curr[1]] = (char)(countmines+'0');
        } 
        
    }


    public int countmines(char[][] board, int[] curr){
        int count=0;
        for(int[] dir: dirs){
            int nr = dir[0]+curr[0];
            int nc = dir[1]+curr[1];
            if(nr >=0 && nr < m && nc >=0 && nc <n && board[nr][nc] == 'M'){
                count++;
            }
        }
        return count;
    }
}